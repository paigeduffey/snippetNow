<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_92893_snippetnow.SnippetNow_DAO</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>SnippetNow_DAO</name>
        <script><![CDATA[var SnippetNow_DAO = Class.create();
SnippetNow_DAO.prototype = {
    initialize: function() {},

    getHelp: function() {
        /*****************
         * Retreive the Help topics
         * return object of objects
         *****************/

        var help = [];
        var hr = new GlideRecord('x_92893_snippetnow_snippetnow_help');
        hr.addEncodedQuery('active=true');
        hr.query();
        while (hr.next()) {
            help.push({
                title: hr.getDisplayValue('title'),
                body: hr.getDisplayValue('help'),
                topic: hr.getDisplayValue('topic')
            })
            /*var help = {};
            help[hr.getDisplayValue('topic')].push({
                title: hr.getDisplayValue('title'),
                body: hr.getDisplayValue('help'),
                topic: hr.getDisplayValue('topic')
            });*/
        }

        return help;
    },

    getAssocHelp: function() {

        var help = {};
        var hr = new GlideRecord('x_92893_snippetnow_snippetnow_help');
        hr.addEncodedQuery('active=true');
        hr.query();
        while (hr.next()) {
            help[hr.getDisplayValue('topic')] = {
                title: hr.getDisplayValue('title'),
                body: hr.getDisplayValue('help'),
            }
        }

        return help;
    },

    getEditorModes: function() {
        /***************
        * Get Simple List of Editor Modes
        * return array of objects
        */

        var a = [];
        var gr = new GlideRecord('x_92893_snippetnow_snippetnow_editor_mode');
        gr.orderBy('name');
        gr.query();
        while(gr.next()) {
            a.push({
                sys_id:gr.getUniqueValue(),
                name:gr.getDisplayValue('mode_name'),
                value:gr.getDisplayValue('mode_value')
            });
        };
        return a;
    },

    getTypeApps: function(tableName, type, recordTable) {
        /******************
         * Get either Types or Applications
         * return records
         ******************/
        var record = [];
        var gr = new GlideRecordSecure(tableName);
        gr.query();
        while (gr.next()) {
            var eq = type + '=' + gr.sys_id.toString();
            gs.info("DAO " + eq);
            record.push({
                sys_id: gr.sys_id.toString(),
                name: gr.getValue('name'),
                color: gr.getValue('color'),
                count: this.getCount(recordTable, eq),
                value: gr.getValue('value'),
                language: this.getTypeLanguage(gr.getValue('language'))
            });

        }
        return record;

    },
    saveAppTypes: function(record, type) {
        /******************
         * Add new Applications or Types
         * return true/false
         ******************/
        gs.info("SnippetNow called saveAppTypes "+JSON.stringify(record));
        var table;
        var t;
        if (type == 'app' || type == 'application') {
            table = 'x_92893_snippetnow_snippetnow_applications';
            t = 'app';
        } else {
            table = 'x_92893_snippetnow_snippet_type';
            t = 'type';
        }
        gs.info("SnippetNow " + JSON.stringify(record));
        var ir = new GlideRecord(table);
        ir.initialize();
        ir.active = true;
        ir.name = record[0].name;
        ir.value = record[0].value;
        ir.color = record[0].color;
        if (t != 'app') {
            ir.language = record[0].language.value;
        }
        var inserted = ir.insert();
        return inserted;
    },
    updateAppType: function(record, type) {
        /**********************
         * Update Application or Type
         * return true/false
         **********************/

        gs.info("SnippetNow Update AppType " + JSON.stringify(record));
        if (type == 'app' || type == 'application') {
            table = 'x_92893_snippetnow_snippetnow_applications';
        } else {
            table = 'x_92893_snippetnow_snippet_type';
        }
        var ur = new GlideRecord(table);
        ur.addEncodedQuery('sys_id=' + record[0].sys_id);
        gs.info("SnippetNow Update AppType " + ur.getEncodedQuery());
        ur.query();
        while (ur.next()) {
            if (type != 'app' || type != 'application') {
                ur.language = record[0].language.value;
            }
            ur.name = record[0].name;
            ur.value = record[0].value;
            ur.color = decodeURIComponent(record[0].color);
            var updated = ur.update();
            return updated;
        }
    },
    getCount: function(tableName, encodedQuery) {
        /******************
         * Get counts
         * return int
         ******************/
        var c = 0;
        var count = new GlideAggregate(tableName);

        if (encodedQuery) {
            count.addEncodedQuery(encodedQuery);
        }

        count.addAggregate('COUNT');
        count.query();

        if (count.next())
            c = count.getAggregate('COUNT');

        return c;
    },

    findTag: function(tag) {
        var response = {};
        var ft = new GlideRecord('x_92893_snippetnow_snippetnow_tags');
        ft.addEncodedQuery("tag=" + tag);
        ft.query();
        if (ft.next()) {
            response.sys_id = ft.sys_id.toString();
            response.tag = ft.getValue('tag');
        } else {
            response.sys_id = null;
            response.tag = tag;
        }
        return response;
    },
    checkTags: function(list) {
        //list = JSON.parse(list);
        var nList = [];
        for (var i = 0; i < list.length; i++) {
            nList.push(this.findTag(list[i].text));
        }
        for (var j = 0; j < nList.length; j++) {
            if (nList[j].sys_id == null) {
                //needs to be added
                //gs.info("SnippetNow add tag " + nList[j].tag);
                var sys_id = this.addTag(nList[j].tag);
                nList[j].sys_id = sys_id;
            }
        }
        var simpleList = [];
        for (var k = 0; k < nList.length; k++) {
            simpleList.push(nList[k].sys_id);
        }
        gs.info("SnippetNOW " + JSON.stringify(nList));
        var l = simpleList.join(",");
        gs.info("SnippetNOW " + l);
        return l;


    },
    addTag: function(tag) {
        var at = new GlideRecord('x_92893_snippetnow_snippetnow_tags');
        at.initialize();
        at.tag = tag;
        var newID = at.insert();
        gs.info("SnippetNow new id " + newID);
        return newID;
    },
    getTagList: function() {
        var gt = new GlideRecord('x_92893_snippetnow_snippetnow_tags');
        gt.query();
        var tags = [];
        while (gt.next()) {
            tags.push({
                "text": gt.getDisplayValue('tag')
            });
        }
        return tags;
    },

    getTags: function(list) {
        var sList = list.split(",");
        var nList = [];
        var count = sList.length;
        for (var i = 0; i < count; i++) {
            var gt = new GlideRecord('x_92893_snippetnow_snippetnow_tags');
            gt.addEncodedQuery("sys_id=" + sList[i]);
            gt.query();
            while (gt.next()) {
                nList.push({
                    "text": gt.getDisplayValue('tag')
                });
            }
        }
        return nList;

    },
    getCreatedBy: function(userID) {
        var user = {};
        var gu = new GlideRecord('sys_user');
        gu.addEncodedQuery('user_name=' + userID);
        gu.query();
        if (gu.next()) {
            user.sys_id = gu.sys_id.toString();
            user.name = gu.getDisplayValue('name');
        }
        return user;
    },
    getColor: function(type, sys_id) {
        var table;
        if (type == 'app') {
            table = 'x_92893_snippetnow_snippetnow_applications';
        } else if (type == 'type') {
            table = 'x_92893_snippetnow_snippet_type';
        }

        var c = new GlideRecord(table);
        c.addEncodedQuery("sys_id=" + sys_id);
        c.query();
        while (c.next()) {
            return c.getValue('color');
        }
    },

    getRelatedRecordList: function(list) {
    	if (list) {
	    	list = list.split(",");
	    	var arr = [];
	    	for (var i=0;i<list.length;i++) {
		    	var glideRecord = new GlideRecord("x_92893_snippetnow_table");
		        glideRecord.get(list[i]);
		        if (glideRecord) {
		        	var rr = {};
		        	rr.id = glideRecord.getUniqueValue();
		        	rr.label = glideRecord.getDisplayValue('title');
		        	arr.push(rr);
		        }	
		     }
		     return arr;
		 }
		 return '';
    },
	
	getAttachmentList: function(sys_id) {
		var list = [];
		var al = new GlideRecord('sys_attachment');
		al.addEncodedQuery('table_sys_id='+sys_id);
		al.query();
		var tc = al.getRowCount();
		while(al.next()) {
			list.push({
				sys_id:al.getUniqueValue(),
				file_name:al.getDisplayValue('file_name')
			});
		}
		var obj = {
			total_count:tc,
			records:list
		};
		return obj;
	},

    getTypeLanguage: function(sys_id) {
        var gr = new GlideRecord('x_92893_snippetnow_snippetnow_editor_mode');
        gr.get(sys_id);
        var o = {
            display_value: gr.getDisplayValue('mode_name'),
            displayValue: gr.getDisplayValue('mode_name'),
            value: gr.getDisplayValue('mode_value')
        }

        return o;
    },

    getType: function(sys_id) {
        var gr = new GlideRecord('x_92893_snippetnow_snippet_type');
        gr.get(sys_id);
        var o = {
            display_value:gr.getDisplayValue('name'),
            sys_id: gr.getUniqueValue(),
            value: gr.getDisplayValue('value'),
            color: gr.getDisplayValue('color'),
            language: this.getTypeLanguage(gr.getValue('language'))
        }

        return o;
    },

    getSnippetRecord: function(sys_id) {
        var glideRecord = new GlideRecord("x_92893_snippetnow_table");
        glideRecord.get(sys_id);
        gs.info("getSnippetRecord "+glideRecord.sys_id);
        if (glideRecord) {
            var app = {};

            app.display_value = glideRecord.getDisplayValue('application');
            app.sys_id = glideRecord.application.toString();
            app.value = glideRecord.application.toString();
            app.color = this.getColor('app', app.sys_id);
            /*var type = {};
            type.display_value = glideRecord.getDisplayValue('type');
            type.sys_id = glideRecord.type.toString();
            type.value = glideRecord.type.toString();
            type.color = this.getColor('type', type.sys_id);*/
            var type = this.getType(glideRecord.type.toString());

            var cb = this.getCreatedBy(glideRecord.sys_created_by.toString());
            var t = glideRecord.getValue('tags');
            if (t) {
                t = this.getTags(t);
            } else {
                t = '';
            }
            var notes = glideRecord.comments.getJournalEntry(-1);
			//gs.info("SnippetNow Comments "+notes);
            var na = notes.split("\n\n");
            var nn = [];
            for (var m = 0; m < na.length; m++) {
                if (this.getUserFromJournal(na[m])) {
                    nn.push(this.getUserFromJournal(na[m]));
                }

            }
            var oe = glideRecord.getValue('allow_others_to_edit');
            if (oe == '1') {
                oe = true;
            } else {
                oe = false;
            }
            //gs.info("SnippetNOW tags " + t);
            var record = [];
            record.push({
                created_by: cb,
                sys_id: glideRecord.sys_id.toString(),
                title: glideRecord.getValue('title'),
                description: glideRecord.getValue('description'),
                application: app,
                allow_others_to_edit: oe,
                type: type,
                color: glideRecord.getValue('color'),
                snippet: glideRecord.getValue('snippet'),
                tags: t,
                previous_comments: nn,
                notes: notes,related_snippets: glideRecord.getValue('related_snippets'),
                related_list: this.getRelatedRecordList(glideRecord.getValue('related_snippets')),
                attachments: this.getAttachmentList(glideRecord.getUniqueValue())
            });
            gs.info("getSnippetRecord "+record[0].title);
            return record[0];
        }
        
    },

    getSnippetRecords: function(tableName, encodedQuery, startIndex, limit, orderBy, ascendingOrder) {
        var glideRecord = new GlideRecordSecure(tableName);
        if (encodedQuery) {
            glideRecord.addEncodedQuery(encodedQuery);
        }
        if (orderBy) {
            if (ascendingOrder) {
                glideRecord.orderBy(orderBy);
            } else {
                glideRecord.orderByDesc(orderBy);
            }
        } else {
            glideRecord.orderByDesc('sys_updated_on');
        }
        if (startIndex && startIndex >= 0 && numberOfRecords > 0) {
            glideRecord.chooseWindow(startIndex, startIndex + numberOfRecords);
        }
        glideRecord.query();
        var records = [];
        while (glideRecord.next()) {
            var app = {};

            app.display_value = glideRecord.getDisplayValue('application');
            app.sys_id = glideRecord.application.toString();
            app.value = glideRecord.application.toString();
            app.color = this.getColor('app', app.sys_id);
            /*var type = {};
            type.display_value = glideRecord.getDisplayValue('type');
            type.sys_id = glideRecord.type.toString();
            type.value = glideRecord.type.toString();
            type.color = this.getColor('type', type.sys_id);*/
            var type = this.getType(glideRecord.type.toString());
            var cb = this.getCreatedBy(glideRecord.sys_created_by.toString());
            var t = glideRecord.getValue('tags');
            if (t) {
                t = this.getTags(t);
            } else {
                t = '';
            }
            var notes = glideRecord.comments.getJournalEntry(-1);
			//gs.info("SnippetNOW Comments "+notes);
            var na = notes.split("\n\n");
            var nn = [];
            for (var m = 0; m < na.length; m++) {
                if (this.getUserFromJournal(na[m])) {
                    nn.push(this.getUserFromJournal(na[m]));
                }

            }
            var oe = glideRecord.getValue('allow_others_to_edit');
            if (oe == '1') {
                oe = true;
            } else {
                oe = false;
            }
            //gs.info("SnippetNOW tags " + t);
            records.push({
                created_by: cb,
                sys_id: glideRecord.sys_id.toString(),
                title: glideRecord.getValue('title'),
                description: glideRecord.getValue('description'),
                application: app,
                allow_others_to_edit: oe,
                type: type,
                color: glideRecord.getValue('color'),
                snippet: glideRecord.getValue('snippet'),
                tags: t,
                previous_comments: nn,
                notes: notes,
                related_snippets: glideRecord.getValue('related_snippets'),
                related_list: this.getRelatedRecordList(glideRecord.getValue('related_snippets')),
				attachments: this.getAttachmentList(glideRecord.getUniqueValue())
            });
        }
        return records;
    },
    getUserFromJournal: function(line) {
		
        var note = {};
        //(?<=\- )(.*?)(?= \()
        var pattern = new RegExp(/\- (.*?)\(/);
        if (line) {
            var un = line.match(pattern).pop();
            gs.info("SnippetNow getUserFromJournal " + line + " | " + JSON.stringify(un));
            var gu = new GlideRecord('sys_user');
            gu.addEncodedQuery("nameLIKE" + un);
			gs.info("SnippetNow getUserFromJournal "+ gu.getEncodedQuery());
            gu.query();
            if (gu.next()) {
                note.comment = line;
                note.created_by = {
                    sys_id: gu.sys_id.toString(),
                    name: gu.getDisplayValue('name')
                }
            }
			gs.info("SnippetNow getUserFromJournal "+JSON.stringify(note));
            return note;


        }
        //var extract = line.match(pattern).pop();

        //

    },
    updateSnippet: function(snippet) {
        /********************
         * Saves the new copy of the snippet
         * returns true/false
         ********************/

        var ur = new GlideRecord('x_92893_snippetnow_table');
        ur.initialize();
        ur.active = true;
        ur.snippet = snippet.snippet;
        ur.color = snippet.color;
        ur.application = snippet.application;
        ur.type = snippet.type;
        ur.title = snippet.title;
        ur.description = snippet.description;
        var updated = ur.update();
        return updated;

    },
	
	checkRoles: function(user_id) {
		var hasRole = false;
		var gr = new GlideRecord('sys_user_has_role');
		gr.addEncodedQuery('user='+user_id);
		gr.query();
		while(gr.next()) {
			var role = gr.getDisplayValue('role');
			if (role == 'x_92893_snippetnow.user') {
				hasRole = true;
			}
		}  
		return hasRole;
	},

    addSuggestion: function(suggestion) {
        /******************
        * Add suggestion from user
        * returns true/false
        */

        var ins = new GlideRecord('x_92893_snippetnow_snippetnow_suggestions');
        ins.initialize();
        ins.submitted_by = suggestion.current_user;
        ins.suggestion = suggestion.data.suggestion;
        var inserted = ins.insert();
        if (inserted) {
            return true;
        } 
        return false;
    },
	
	useSlackMessagingOnInsert: function() {
		/****************
		* Are we using it or not?
		* Via Business Rule on Insert
		****************/
		
		var bool = false;
		var gr = new GlideRecord('x_92893_snippetnow_snippetnow_properties');
		gr.addQuery("property","slack.messaging.insert.record.use");
		gr.query();
		while(gr.next()) {
			bool = (gr.getDisplayValue('value') == 'true');
		}
		return bool;
	},
	
	slackMessageOnInsertWebHook: function() {
		/*************
		* get the webhook property
		*************/
		var wh = "";
		var gr = new GlideRecord('x_92893_snippetnow_snippetnow_properties');
		gr.addQuery("property","slack.messaging.insert.record.webHook");
		gr.query();
		while(gr.next()) {
			wh = gr.getDisplayValue('value');
		}
		return wh;
	},
	
	slackMessageHelper: function() {
		/*************
		* get the user for who to reach out to if you need access
		*************/
		
		var hm = "";
		var gr = new GlideRecord('x_92893_snippetnow_snippetnow_properties');
		gr.addQuery('property','slack.messaging.global.helperID');
		gr.query();
		while(gr.next()) {
			hm = gr.getDisplayValue('value');
		}
		return hm;
	},
	
	slackMessageOnInsertBuilder: function(obj) {
		/*************
		* Build the message object
		************/
		
		var message = {
			"blocks": [
				{
					"type": "section",
					"text": {
						"type": "mrkdwn",
						"text": "New Snippet Added!\n\n<"+obj.link+"|"+obj.title+">\n>_"+obj.description+"_"
					},
					"accessory": {
						"type": "image",
						"image_url": "https://66.media.tumblr.com/1921bcd13e12643771410200a322cb0e/tumblr_ogs5bcHWUc1udh5n8o1_500.gif",
						"alt_text": "Carlton!"
					}
				},
				{
				"type": "context",
				"elements": [
				{
					"type": "mrkdwn",
					"text": "*Created By:* "+obj.sys_created_by+"\nIf you don't have access, reach out to <@"+obj.helperID+">"
				}
				]
			}
			]
		};
		message = JSON.stringify(message);
		return message;
		
	},
	
	slackMessageOnInsert: function(record) {
		
		/***************
		* Let's set up the message on insert
		* need to get a few properties
		***************/
		var webHook = this.slackMessageOnInsertWebHook();
		var instance = gs.getProperty('glide.servlet.uri');
		var message = {
			
			link: instance + "sp?id=snippetNow&spa=1&sys_id="+record.sys_id,
			helperID: this.slackMessageHelper(),
			title: record.title,
			description: this.truncate(record.description),
			sys_created_by: record.sys_created_by,
			
		};
		
		var slackMessage = this.slackMessageOnInsertBuilder(message);
		
		gs.info(">>> slackMessageOnInsert message: "+JSON.stringify(message));
		gs.info(">>> slackMessageOnInsert slackMessage: "+slackMessage);
		
		var request = new sn_ws.RESTMessageV2();
		request.setHttpMethod("POST");
		request.setEndpoint(webHook);
		request.setRequestHeader("Accept","application/json");
		request.setRequestHeader('Content-Type','application/json');
		//OR METHOD # request.setEndpoint('SLACK_EndpointURL');
		
		// Your message
		var reqBody = slackMessage;
		request.setRequestBody(reqBody);
		
		var response = request.executeAsync();
		var responseBody = response.getBody();
		gs.info(">>> slackMessageOnInsert response: "+JSON.stringify(responseBody));
		
		
	},
			
	truncate: function(string) {
		var len = 25;
		var s = string.split(" ");
		var r;
		
		if(s.length > len){
			s = s.slice(0, len);
			r = s.join(" ") + "...";
		} else {
			r = string;
		}
		return r;
	},

    type: 'SnippetNow_DAO'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-09-10 19:28:15</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>54e89e7edbcd0300dfa77fcfbf96191b</sys_id>
        <sys_mod_count>202</sys_mod_count>
        <sys_name>SnippetNow_DAO</sys_name>
        <sys_package display_value="Snippet Repo" source="x_92893_snippetnow">86490346db010300dfa77fcfbf9619c2</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Snippet Repo">86490346db010300dfa77fcfbf9619c2</sys_scope>
        <sys_update_name>sys_script_include_54e89e7edbcd0300dfa77fcfbf96191b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-04-26 18:32:06</sys_updated_on>
    </sys_script_include>
</record_update>
