<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function($scope, spUtil, $timeout, $rootScope, $http, $uibModal, $location) {
    /* widget controller */
    var c = this;
	$location.search("spa",1);
    //console.log("FIRST", c.data);
    $scope.types = c.data.types;
    $scope.snippet = {};
    $scope.simpleTags = '';
    $scope.snippetType = {};
    $scope.snippetType.name = 'snippetType';
    $scope.snippetApp = {};
    //console.log("FIRST", $scope.snippet);
    //console.log("FIRST", c.data.snippet);
    $scope.snippetSetOptions = c.data.related_records;
    $scope.snippetSetModel = [];
    $scope.example1model = [];
    $scope.example1data = [{
        id: 1,
        label: "David"
    }, {
        id: 2,
        label: "Jhon"
    }, {
        id: 3,
        label: "Danny"
    }];
    $scope.snippetExtraSettings = {
        externalIdProp: '',
        scrollable: true,
        scrollHeight: '400'
    };

    $scope.snippetEditorMode = {
        displayValue: 'Javascript',
        value: 'javascript',
        name: 'snippetEditorMode'
    }
    /*$scope.editorMode = 'plain_text';
    if ($scope.snippet.type && $scope.snippet.type.language.value.length > 0) {
        $scope.editorMode = $scope.snippet.type.language.value;
    }*/
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/chrome");
    editor.getSession().setMode("ace/mode/" + $scope.snippetEditorMode.value);
    //editor.getSession().setMode("ace/mode/javascript");
    editor.getSession().setUseWrapMode(true);
    editor.setReadOnly(false);
    editor.setOptions({
        minLines: 20,
        maxLines: 50
    });
    //console.log("first editor",editor);

    $scope.$watch('editorMode', function(newValue, oldValue) {
        //console.log(newValue);
        if (newValue) {
            editor.getSession().setMode("ace/mode/" + newValue);
        }
    })
    $scope.$watchCollection('snippetEditorMode', function(newValue, oldValue) {
        //console.log("Watching Snippet Mode",newValue);
        if (newValue) {
            editor.getSession().setMode("ace/mode/" + newValue.value);
            //console.log("The editor",editor);
        }
    })

    spUtil.recordWatch($scope, "x_92893_snippetnow_snippet_type", "", function(name, data) {
        if (name.data && name.data.action == 'entry') {
            //console.log(name);
            $scope.types.push({
                color: name.data.record.color.value,
                count: "0",
                language: {
                    display_value: name.data.record.language.display_value,
                    displayValue: name.data.record.language.display_value,
                    value: name.data.record.language.display_value.replace(/\s+/g, '_').toLowerCase()
                },
                name: name.data.record.name.display_value,
                sys_id: name.data.sys_id,
                value: name.data.record.value.display_value
            });

        }
        //console.log("new List", $scope.types);
        /*$scope.types = null;
        spUtil.update($scope);*/

    });

    spUtil.recordWatch($scope, "x_92893_snippetnow_table", "", function(name, data) {
        //console.log("New Snippet Added");
        if (name && name.data && name.data.record) {
            //console.log("add this one", name, $scope);

            delete(c.data.snippet);
            c.data.getSetOptions = true;
            c.data.getSetOptions_ID = name.data.sys_id;
            c.server.update().then(function(response) {
                //console.log("Response for the masses",response);

                if (response.current_user != response.snippet.created_by.sys_id) {
                    //console.log("Is this running?");
                    $scope.snippetSetOptions = response.related_records;
                }
            });



            
        }
    });

    var loadTime = 1000000;
    var errorCount = 0;
    var loadPromise;

    var getData = function() {
        $http({
                method: "POST",
                headers: {
                    "Accept": "application/json;charset=UTF-8",
                    "Content-Type": "application/json;charset=UTF-8"
                },
                url: "/api/x_92893_snippetnow/snippetnow_api/getSnippet/" + $scope.snippet.sys_id
            })
            .success(function(response) {
                //console.log("Success", response);
                //need to check comments
                oldComm = $scope.oldSnippet.previous_comments;
                newComm = response.result.previous_comments;
                var eq = true;
                if (oldComm.length != newComm.length) {
                    eq = false;
                }
               // console.log("are they equal", eq, oldComm, newComm);
                if (!eq) {
                    $scope.snippet.previous_comments = response.result.previous_comments;

                    if (c.data.current_user != response.result.previous_comments[0].created_by.sys_id) {
                        spUtil.addInfoMessage("A new comment has been added!");
                    }
                    //$scope.apply();
                }
                //$scope.snippet = response.result;
                errorCount = 0;
                nextLoad();


            })
            .error(function(response) {
                //$scope.isInSchedule = false;
                //gs.info("Power Up Portal: Chat Queue Polling Error Communication "+JSON.stringify(response));
                //console.log("Cannot update snippet", response);
                nextLoad(++errorCount * 2 * loadTime);
            });

    };
    var cancelNextLoad = function() {
        $timeout.cancel(loadPromise);
    };

    var nextLoad = function(mill) {
        mill = mill || loadTime;

        //Always make sure the last timeout is cleared before starting a new one
        cancelNextLoad();
        loadPromise = $timeout(getData, mill);
    };




    //Always clear the timeout when the view is destroyed, otherwise it will keep polling
    $scope.$on('$destroy', function() {
        cancelNextLoad();
    });

	//console.log("c.data.snippet",c.data.snippet);
	//console.log("data.snippet",$scope.data.snippet);
    if (c.data.snippet) {
        $scope.snippet = c.data.snippet;

        var related_id = $scope.snippetSetOptions.indexOf($scope.snippet.sys_id);
        //console.log(related_id);
        if (related_id > -1) {
            $scope.snippetSetOptions.splice(related_id, 1);
        }


        //console.log("Is There a SNippet",c.data.snippet.editor,c.data.snippet.snippet);
        if (c.data.snippet.editor || c.data.snippet.snippet) {
			var ed;
			if (!c.data.snippet.editor) {
				ed = c.data.snippet.snippet;
			} else {
				ed = c.data.snippet.editor;
			}
            //console.log(editor);
            if (!c.data.snippet.allow_others_to_edit) {
                //console.log("Hello");
                editor.setReadOnly();
            }
            editor.setReadOnly(false);
            editor.setValue(ed);
            editor.clearSelection();
        } else {

            editor.setValue("//Enter your code here");
        }

        $scope.snippetType = {
            displayValue: c.data.snippet.type.display_value,
            value: c.data.snippet.type.value,
            language: c.data.snippet.type.language.value,
            name: 'snippetType'
        };
        $scope.snippetApp = {
            displayValue: c.data.snippet.application.display_value,
            value: c.data.snippet.application.value,
            name: 'snippetApp'
        };

    }
    $scope.iNeedHelp = function(val) {

        $scope.openModal('showHelp', val);
    }
    c.openModal = function(tpl, modalData) {
        $scope.modalData = modalData;
        $rootScope.modalInstance = $uibModal.open({
            templateUrl: tpl,
            scope: $scope
        });
    }
    $scope.openModal = function(tpl, topic) {
        //console.log(topic);
        if (topic) {
            //var idx = findWithAttr(c.data.help, 'topic', topic);
            $scope.modalData = c.data.help[topic];
        }
        //console.log($scope.modalData, c.data.help);

        $rootScope.modalInstance = $uibModal.open({
            templateUrl: tpl,
            scope: $scope
        });
    }

    $scope.closeModal = function() {
        //console.log("triggered");
        $rootScope.modalInstance.close();
    }



    /*c.openModal = function(tpl) {
    	c.modalInstance = $uibModal.open({
    		templateUrl: tpl,
    		scope: $scope
    	});
    }
 
    c.closeModal = function() {
    	c.modalInstance.close();
    }*/

    $scope.showCommentBox = false;
    $scope.showComments = function(val) {
        //console.log("comments", val);
        //if yes, show the add comments and previous comments
        if (val) {
            $scope.showCommentBox = true;
        } else {
            $scope.showCommentBox = false;
        }
    }

    $scope.$on('createNew', function(event, data) {
		$location.search("spa",1);
		$location.search("sys_id",null);
        //console.log(data);
        $scope.previousSnippet = $scope.snippet;
        $scope.previousSnippetType = $scope.snippetType;
        $scope.previousSnippetApp = $scope.snippetApp;
        $scope.previousSnippetRelatedList = $scope.snippetSetModel;

        if (data) {
            //console.log(editor);
            $scope.snippet = {};
            editor.setValue("//Enter Your Code Here");

            $scope.snippetType = {
                displayValue: '',
                value: '',
                name: 'snippetType'
            };
            $scope.snippetApp = {
                displayValue: '',
                value: '',
                name: 'snippetApp'
            };
            $scope.snippetSetModel = [];

        }
    });
    $scope.cancelAdd = function() {
            if ($scope.previousSnippet) {
                $scope.snippet = $scope.previousSnippet;
                $scope.snippetType = $scope.previousSnippetType;
                $scope.snippetApp = $scope.previousSnippetApp;
                $scope.snippetSetModel = $scope.previousSnippetRelatedList;
                editor.setValue($scope.snippet.snippet);
                editor.clearSelection();
            }
        }
        //console.log("Listening");
    if ($rootScope.initialSnippet && $rootScope.initialSnippet.sys_id) {
        $scope.snippet = $rootScope.initialSnippet;
        $scope.comments = {};
        $scope.comments.show = false;
        $scope.showCommentBox = false;

        if ($scope.snippet.snippet) {
            editor.setValue($scope.snippet.snippet);
            editor.clearSelection();
        } else {
            editor.setValue("//Enter Your Code Here");
        }

        $scope.snippetSetModel = [];
        if ($scope.snippet.related_list) {
            $scope.snippetSetModel = $scope.snippet.related_list;
        }

        $scope.snippetType = {
            displayValue: $scope.snippet.type.display_value,
            value: $scope.snippet.type.sys_id,
            name: 'snippetType'
        };

        $scope.snippetApp = {
            displayValue: $scope.snippet.application.display_value,
            value: $scope.snippet.application.sys_id,
            name: 'snippetApp'
        };

        if ($scope.snippet.type && $scope.snippet.type.color) {
            $scope.snippetType.color = $scope.snippet.type.color;
        }
        if ($scope.snippet.application && $scope.snippet.application.color) {
            $scope.snippetApp.color = $scope.snippet.application.color;
        }

        c.data.getSetOptions = true;
        c.data.getSetOptions_ID = $scope.snippet.sys_id;
        c.server.update().then(function(response) {
            //console.log("Looking to get new option list", response);
            $scope.snippetSetOptions = response.freshSetOptions;
            c.data.getSetOptions = false;
            c.data.getSetOptions_ID = null;


        });

        //console.log($scope.snippet.sys_id);
        $scope.snippetSetOptions = $scope.snippetSetOptions.filter(function(el) {
            return el.id !== $scope.snippet.sys_id;
        });

        $rootScope.initialSnippet = null;
    }
    $scope.$on("selectedSnippet", function(event, data) {
		$location.search("spa",1);
		$location.search("sys_id",data.sys_id);
        //console.log("Before the boo");
        $timeout(function() {
            //console.log("BOOO", data);
            //might need to grab a fresh list of records for related list
            if (data) {
                $scope.comments = {};
                $scope.comments.show = false;
                $scope.showCommentBox = false;
                $scope.snippet = data;
                //console.log($scope.youCanEdit);
                if (!$scope.canYouEdit()) {
                    editor.setReadOnly(false);
                } else {
                    editor.setReadOnly(true);
                }

                if ($scope.snippet.snippet) {
                    editor.setValue($scope.snippet.snippet);
                    editor.clearSelection();
                } else {
                    editor.setValue("//Enter Your Code Here");
                }

                if ($scope.snippet.type && $scope.snippet.type.language && $scope.snippet.type.language.value.length > 0) {
                    editor.getSession().setMode("ace/mode/" + $scope.snippet.type.language.value);
                    $scope.editorMode = $scope.snippet.type.language.value;
                } else {
                    editor.getSession().setMode("ace/mode/plain_text");
                }
                //console.log("Editor", editor);

                $scope.snippetSetModel = [];
                if ($scope.snippet.related_list) {
                    $scope.snippetSetModel = $scope.snippet.related_list;
                }

                $scope.snippetType = {
                    displayValue: $scope.snippet.type.display_value,
                    value: $scope.snippet.type.sys_id,
                    name: 'snippetType'
                };

                $scope.snippetApp = {
                    displayValue: $scope.snippet.application.display_value,
                    value: $scope.snippet.application.sys_id,
                    name: 'snippetApp'
                };

                if (data.type && data.type.color) {
                    $scope.snippetType.color = data.type.color;
                }
                if (data.application && data.application.color) {
                    $scope.snippetApp.color = data.application.color;
                }

                c.data.getSetOptions = true;
                c.data.getSetOptions_ID = $scope.snippet.sys_id;
                c.server.update().then(function(response) {
                    //console.log("Looking to get new option list", response);
                    $scope.snippetSetOptions = response.freshSetOptions;
                    c.data.getSetOptions = false;
                    c.data.getSetOptions_ID = null;
                });

                //console.log($scope.snippet.sys_id);
                $scope.snippetSetOptions = $scope.snippetSetOptions.filter(function(el) {
                    return el.id !== $scope.snippet.sys_id;
                });
                /*var related_id = $scope.snippetSetOptions.indexOf($scope.snippet.sys_id);
                console.log(related_id);
                if (related_id > -1) {
                		$scope.snippetSetOptions.splice(related_id, 1);
                }*/
                //console.log(editor);

                $scope.oldSnippet = data;
                //getData();


                var query = "name=x_92893_snippetnow_table^element_id=" + $scope.snippet.sys_id;
                //console.log("query", query);

                spUtil.recordWatch($scope, "sys_journal_field", "name=x_92893_snippetnow_table^element_id=" + $scope.snippet.sys_id, function(name, data) {
                    //console.log("i saw that comment", name);
                    if (name && name.data && name.data.action == 'entry') {
                        c.data.snippet = null;
                        c.data.setOptions = null;
                        c.data.updateAction = 'get_user_sys_id_from_user_id';
                        c.data.updateValue = {
                            userID: name.data.record.sys_created_by.value
                        }
                        //console.log("Getting the user", c.data);
                        c.server.update().then(function(response) {
                            //console.log("Got User Response", response);
                            if (response && response.updateValue) {
                                var comment = {
                                    comment: name.data.record.sys_created_on.display_value + " - " + response.updateValue.user.name + " (Comments) \n " + name.data.record.value.display_value,
                                    created_by: response.updateValue.user
                                }
                            }
                            //console.log("built new comment", comment);
                            $scope.snippet.previous_comments.unshift(comment);
                        })
                        var comment = {};

                    }
                })
            }
        }, 500);
    })



    $scope.$on("field.change", function(evt, parms) {

        //console.log("Field Change", parms);
        if (parms.field.name == 'snippetType') {
            //c.data.setSnippetType = parms.newValue;

            var idx = findWithAttr($scope.types, 'sys_id', parms.field.value);
            //console.log("idx", idx);
            
            if (idx >= 0) {
                $scope.snippetEditorMode.value = $scope.types[idx].language.value;
                $scope.snippetEditorMode.displayValue = $scope.types[idx].language.displayValue;
                //$scope.editorMode = $scope.types[idx].language.value;
                //editor.getSession().setMode("ace/mode/" + $scope.types[idx].language.value);
                //console.log("Editor 1",editor);
            }
        }
        if (parms.field.name == 'snippetEditorMode') {
            $scope.snippetEditorMode.value = parms.field.value;
            $scope.snippetEditorMode.displayValue = parms.field.displayValue;
            //editor.getSession().setMode("ace/mode/" + parms.field.value);
            //console.log("Editor",editor);
        }
        
    });

    $scope.loadTags = function(query) {

        return c.data.tagList;
    }

    function relatedList(list) {
        //console.log(list);
        var arr = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                arr.push(list[i].id);
            }
        }
        //console.log(arr);
        arr = arr.join(",");
        return arr;
    }
	


    $scope.submit = function(type) {
        //console.log("Snippet", $scope.snippet);
        //console.log("SnippetType",$scope.snippetType);
        //console.log("SnippetApp",$scope.snippetApp);

        $scope.snippet.application = $scope.snippetApp;
        $scope.snippet.type = $scope.snippetType;
        $scope.snippet.editor = editor.getValue();
        //need to get the related list also
        $scope.snippet.related_snippets = relatedList($scope.snippetSetModel);
        //$scope.snippet.previous_comments.unshift($scope.snippet.add_comments);

        c.data.snippet = $scope.snippet;

        //console.log("C DATA",c.data.snippet);
        c.server.update().then(function(response) {
            //spUtil.update($scope);
            //console.log("Response", response);
            $scope.snippet.application.display_value = $scope.snippet.application.displayValue;
            $scope.snippet.type.display_value = $scope.snippet.type.displayValue;

            if (response.recordAction && type == 'update') {
                //console.log("UPDATE Scope",$scope.snippet);

                $scope.openModal('updatedSnippet');
                $timeout(function() {
                    $rootScope.$broadcast("newTags", response.tagList);
                    $rootScope.$broadcast("updatedSnippet", response.snippet);
                    delete c.data.snippet;
                    $scope.snippet = response.snippet;
                    $scope.closeModal();
                    //window.location.reload();
                    //spUtil.update($scope);
                    //might need to broadcast what the app/type was to update counts
                    $rootScope.$broadcast("checkAppCount", $scope.snippetApp);
                    $rootScope.$broadcast("checkTypeCount", $scope.snippetType);
                }, 1000)
            }
            if (response.recordAction && type == 'insert') {
                $scope.openModal('updatedSnippet');
                $timeout(function() {
                    delete c.data.snippet;
                    $rootScope.$broadcast('newAddedSnippet', response.snippet);
                    $scope.snippet = response.snippet;
                    //$rootScope.$broadcast('newSnippet',$scope.snippet);
                    //spUtil.update($scope);
                    $scope.closeModal();
                    //window.location.reload();

                });
            }

        })


    };


    $scope.chatCSS = function(comment, owner, style) {

        $scope.stylePrefix = 'you';
        if (comment === owner) {
            $scope.stylePrefix = "me"
        }

        if (style == 'container') {
            return $scope.stylePrefix + "-container clearfix";
        } else if (style == 'bubble') {
            return $scope.stylePrefix + "-bubble " + stylePrefix
        } else if (style == 'avatar-left') {
            if ($scope.stylePrefix == 'me') {
                return true;
            }
            return false;
        } else if (style == 'avatar-right') {
            if ($scope.stylePrefix == 'you') {
                return true;
            }
            return false;
        }

    }

    $scope.chatContainer = function(comment, owner) {
        if (comment == owner) {
            return 'me-container';
        }
        return 'you-container';
    }
    $scope.whoSaidIt = function(comment, owner) {
        if (comment == owner) {
            return 'me-bubble me';
        }
        return 'you-bubble you';
    }

    $scope.canYouEdit = function() {
        var creator = '';
        if ($scope.snippet && $scope.snippet.created_by && $scope.snippet.created_by.sys_id) {
            creator = $scope.snippet.created_by.sys_id;
        }
        if (!$scope.snippet.sys_id) {
            $scope.youCanEdit = true;
            return false;
        } else {

            if (creator == c.data.current_user) {
                $scope.youCanEdit = true;
                return false;
            } else if (creator != c.data.current_user) {
                if ($scope.snippet.allow_others_to_edit) {
                    $scope.youCanEdit = true;
                    return true;
                } else {
                    $scope.youCanEdit = false;
                    return true;
                }
            }

            /*if (c.data.current_user == creator) {
            	console.log("Return False",creator,c.data.current_user);
            	$scope.youCanEdit = true;
            	return false;	
            } else {
            	if ($scope.snippet.allow_others_to_edit && creator == c.data.current_user) {
            		$scope.youCanEdit = true;
            		return false;
            	} else {
            		//console.log("Return True");
            		$scope.youCanEdit = false;
            		return true;
            	}
            }*/
        }
    }

    $scope.canEdit = function(val) {
        var creator = '';
        if ($scope.snippet && $scope.snippet.created_by && $scope.snippet.created_by.sys_id) {
            creator = $scope.snippet.created_by.sys_id;
        }
        if (!$scope.snippet.sys_id) {
            $scope.youCanEdit = true;
        } else {

            if (val) {
                //checked
                //not read only
                $scope.youCanEdit = true;
            } else {
                //not checked
                if (creator != c.data.current_user) {

                    //set to readonly;
                    $scope.youCanEdit = false;
                } else {
                    //not read only
                    $scope.youCanEdit = true;
                }

            }
        }
    }

    $scope.gotoSnippet = function(id) {
        $scope.modalData = {
            load_snippet: id
        };
        $scope.openModal('loadNewSnippetConfirm');


    }
    $scope.loadNewSnippet = function(obj) {
        //console.log(obj);
        $scope.closeModal();

        $http({
                method: "POST",
                headers: {
                    "Accept": "application/json;charset=UTF-8",
                    "Content-Type": "application/json;charset=UTF-8"
                },
                url: "/api/x_92893_snippetnow/snippetnow_api/getSnippet/" + obj.load_snippet
            })
            .then(function(response) {
                console.log("Response", response);
                if (response && response.data && response.data.result) {
                    $scope.snippet = response.data.result;
                }
            })

    }

    $scope.showHelp = function(topic) {

    }

    $scope.addAttachment = function(sys_id) {
        var modalData = {};
        modalData.sys_id = sys_id;
        modalData.table = 'x_92893_snippetnow_table';
        spUtil.get("widget-ticket-attachments", {
            sys_id: modalData.sys_id,
            table: modalData.table,
            record_id: modalData.sys_id,
            record_table: modalData.table
        }).then(function(response) {
            c.attachmentItemWidget = response;
            c.openModal('addAttachment');
        });
        //console.log(c.attachmentItemWidget);

    }

    $scope.removeUS = function(str) {
        //console.log(str);
        var nStr = str.replace(/_/, " ");
        //console.log(nStr);
        return nStr;
    }

    String.prototype.escapeSpecialChars = function() {
        return this.replace(/(?:\r\n|\r|\n)/g, "<br>")
            /*.replace(/\\'/g, "\\'")
            .replace(/\\"/g, '\\"')
            .replace(/\&/g, "\\&")
            .replace(/\r/g, "\\r")
            .replace(/\t/g, "\\t")
            .replace(/\b/g, "\\b")
            .replace(/\f/g, "\\f");*/
    };

    function findWithAttr(array, attr, value) {
        for (var i = 0; i < array.length; i += 1) {
            //console.log(array[i][attr] + " | " + value);
            if (array[i][attr] === value) {
                return i;
            }
        }
        return -1;
    }

    function isEqual(value, other) {

        // Get the value type
        var type = Object.prototype.toString.call(value);

        // If the two objects are not the same type, return false
        if (type !== Object.prototype.toString.call(other)) return false;

        // If items are not an object or array, return false
        if (['[object Array]', '[object Object]'].indexOf(type) < 0) return false;

        // Compare the length of the length of the two items
        var valueLen = type === '[object Array]' ? value.length : Object.keys(value).length;
        var otherLen = type === '[object Array]' ? other.length : Object.keys(other).length;
        if (valueLen !== otherLen) return false;

        // Compare two items
        var compare = function(item1, item2) {

            // Get the object type
            var itemType = Object.prototype.toString.call(item1);

            // If an object or array, compare recursively
            if (['[object Array]', '[object Object]'].indexOf(itemType) >= 0) {
                if (!isEqual(item1, item2)) return false;
            }

            // Otherwise, do a simple comparison
            else {

                // If the two items are not the same type, return false
                if (itemType !== Object.prototype.toString.call(item2)) return false;

                // Else if it's a function, convert to a string and compare
                // Otherwise, just compare
                if (itemType === '[object Function]') {
                    if (item1.toString() !== item2.toString()) return false;
                } else {
                    if (item1 !== item2) return false;
                }

            }
        };

        // Compare properties
        if (type === '[object Array]') {
            for (var i = 0; i < valueLen; i++) {
                if (compare(value[i], other[i]) === false) return false;
            }
        } else {
            for (var key in value) {
                if (value.hasOwnProperty(key)) {
                    if (compare(value[key], other[key]) === false) return false;
                }
            }
        }

        // If nothing failed, return true
        return true;

    };

    console.log("Form", $scope, $rootScope);
}]]></client_script>
        <controller_as>c</controller_as>
        <css>#editor {
  height: 100%
}
.editor-group {
  /*height: 400px;*/
  margin-bottom: 40px;
}
.editor-new {
  /*height: 250px;*/
}
.editor-existing {
  /*height: 350px;*/
}

.avatar-circle {
  display: block;
  padding-right: 15px;
}

.chat {
    /*width: 400px;*/
    width: 90%;
}
.attachment-pills {
	background-color: #666;  
}
.avatar {
  box-shadow: 0 0 6px #333;
}

.chat-avatar {
    position: relative;
    top: 5px;
}

.me-bubble{
    background-color: $primary;
    border-radius: 5px;
    box-shadow: 0 0 6px #B2B2B2;
    display: inline-block;
    padding: 10px 18px;
    position: relative;
    vertical-align: top;
  	color: #fff;
    left: 20px;
}

.me-bubble::before {
    background-color: $primary;
    content: "\00a0";
    display: block;
    height: 16px;
    position: absolute;
    top: 11px;
    transform:             rotate( 29deg ) skew( -35deg );
        -moz-transform:    rotate( 29deg ) skew( -35deg );
        -ms-transform:     rotate( 29deg ) skew( -35deg );
        -o-transform:      rotate( 29deg ) skew( -35deg );
        -webkit-transform: rotate( 29deg ) skew( -35deg );
    width:  20px;
  
}

.you-container {

}
.you-bubble{
    background-color: $success;
    border-radius: 5px;
    box-shadow: 0 0 6px #B2B2B2;
    display: inline-block;
    padding: 10px 18px;
    position: relative;
    vertical-align: top;
  color: #fff;
  
}
.attachments {
  font-size: 30px;
  padding-bottom: 30px; 
}

.you-bubble::before {
    background-color: $success;
    content: "\00a0";
    display: block;
    height: 16px;
    position: absolute;
    top: 11px;
    transform:             rotate( 29deg ) skew( -35deg );
        -moz-transform:    rotate( 29deg ) skew( -35deg );
        -ms-transform:     rotate( 29deg ) skew( -35deg );
        -o-transform:      rotate( 29deg ) skew( -35deg );
        -webkit-transform: rotate( 29deg ) skew( -35deg );
    width:  20px;
    
}

.me {
    position: relative;
    float: left;   
    /*margin: 5px 20% 5px 20px; */
    max-width: 75%;
    left: 20px;
    margin-bottom: 10px;

}

.me::before {
    box-shadow: -2px 2px 2px 0 rgba( 178, 178, 178, .4 );
    left: -9px;           
}

.you {
    position: relative;
    float: right;    
    /*margin: 5px 20px 5px 45px;  */
    right: 40px ;
    max-width: 75%;    
    margin-bottom: 10px;  
    text-align: right; 
}

.you::before {
    box-shadow: 2px -2px 2px 0 rgba( 178, 178, 178, .4 );
    right: -9px;    
}

.related-snip-list {
  margin-bottom: 10px;
}
.btn {
    margin-right: 5px;
}

label {
  font-weight: bold;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>snippetnow-editor</id>
        <internal>false</internal>
        <link/>
        <name>SnippetNow Editor</name>
        <option_schema>[{"name":"type","label":"Type","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

  	if (input && input.snippet) {
		var done = actionSnippet(input.snippet);
		var sys_id;
		if (input.snippet.sys_id) {
			sys_id = input.snippet.sys_id;
		}
		
		//$sp.log("Inserted "+done);
		if (done != false) {
			data.recordAction = true;
			sys_id = done;
		} else {
			data.recordAction = false;
		}

		data.snippet = new SnippetNow_DAO().getSnippetRecord(sys_id);
	}
	if (input && input.getSetOptions) {
		//console.log("getsetoptions");
		data.freshSetOptions = getSnippets(input.getSetOptions_ID);
		
		data.snippet = new SnippetNow_DAO().getSnippetRecord(input.getSetOptions_ID);
	}

	if (input && input.updateAction) {
		
		if (input.updateAction == 'get_user_sys_id_from_user_id') {
			var user = new SnippetNow_DAO().getCreatedBy(input.updateValue.userID);
			data.updateValue = {
				user:user
			}
		}
		
	}
	if (input && input.recordWatcherSnippet) {
		data.recordWatcherSnippet = new SnippetNow_DAO().getSnippetRecord(input.recordWatcherSnippet);
	}

	data.editorModes = new SnippetNow_DAO().getEditorModes();
	
	/*data.snippetType = {};
	data.snippetType.name = 'Please Select';
	data.snippetType.value = '';
	data.snippetApp = {};
	data.snippetApp.name = 'Please Select';
	data.snippetApp.value = '';*/
	
	
	var record = {};
	record.sys_id = $sp.getParameter('sys_id');
	if (record.sys_id) {
		//data.snippet = getSnippetRecord(record.sys_id);	
		data.snippet = new SnippetNow_DAO().getSnippetRecord(record.sys_id);
		//console.log("Get a snippet");
	} else {
		
		/*data.snippet = {};
		data.snippet.application = {};
		data.snippet.application.display_value = '';
		data.snippet.application.value = '';
		data.snippet.type = {};
		data.snippet.type.display_value = '';
		data.snippet.type.value = '';*/
	}
	//console.log(data.snippet);
	data.tagList = new SnippetNow_DAO().getTagList();
	data.current_user = gs.getUserID();
	data.hasRole = new SnippetNow_DAO().checkRoles(data.current_user);
	//$sp.log(data.hasRole);
	
	data.help = new SnippetNow_DAO().getAssocHelp();
	data.types = new SnippetNow_DAO().getTypeApps('x_92893_snippetnow_snippet_type','type','x_92893_snippetnow_table');
	data.related_records = getSnippets(record.sys_id);
	
	
	
	
	function getSnippetRecord(sys_id) {
		/*******************
		* Get Snippet Record
		*
		*******************/
		var record = {};
		var rec = new GlideRecord('x_92893_snippetnow_table');
		rec.addEncodedQuery('sys_id='+sys_id);
		rec.query();
		while(rec.next()) {
			record.application = {};
			record.application.value = rec.application.toString();
			record.application.display_value = rec.getDisplayValue('application');
			record.type = {};
			record.type.value = rec.type.toString();
			record.type.display_value = rec.getDisplayValue('type');
			record.title = rec.getDisplayValue('title');
			record.description = rec.getDisplayValue('description');
			record.editor = rec.getValue('snippet');
			record.sys_id = rec.getUniqueValue();
			return record
			
		}
	}
	
	
	
	function actionSnippet(snippet) {
		/*******************
		* Create Snippet Record
		*
		*******************/
		gs.info("actionSnippet "+JSON.stringify(snippet));
		var t = '';
		
		if (snippet.tags) {
			t = new SnippetNow_DAO().checkTags(snippet.tags);
			
		}
		console.log("Tags");
		console.log(t);
		
		var action;
		var rec = new GlideRecord('x_92893_snippetnow_table');
		rec.initialize();
		
		if (snippet && snippet.sys_id) {
			//tis update
			rec.addQuery('sys_id',snippet.sys_id);
			rec.query();
			while(rec.next()) {
				rec.title = snippet.title;
				rec.description = snippet.description;
				rec.snippet = snippet.editor;
				rec.type = snippet.type.value;
				rec.application = snippet.application.value;
				rec.tags = t;
				rec.allow_others_to_edit = snippet.allow_others_to_edit;
				rec.comments = snippet.add_comments;
				rec.related_snippets = snippet.related_snippets;
				action = rec.update();
				$sp.log(action);
				
			}
		} else {
			//tis insert
			rec.title = snippet.title;
			rec.description = snippet.description;
			rec.snippet = snippet.editor;
			rec.type = snippet.type.value;
			rec.application = snippet.application.value;
			rec.allow_others_to_edit = snippet.allow_others_to_edit;
			rec.related_snippets = snippet.related_snippets;
			rec.active = true;
			rec.tags = t;
			action = rec.insert();
		}
		
		
		if (action) {
			//return true
			return action.toString();
		}
		return false;
		
	}
	
	function getSnippets(id) {
		var allSnippets = [];
		var gr = new GlideRecord('x_92893_snippetnow_table');
		gr.addEncodedQuery('sys_id!='+id);
		gr.orderBy('title');
		gr.query();
		while(gr.next()) {
			var label = gr.getDisplayValue('title') + " | " + gr.getDisplayValue('application') + " - " +gr.getDisplayValue('type');
			allSnippets.push({id:gr.getUniqueValue(),label:gr.getDisplayValue('title')});
		}
		return allSnippets;
	}
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-11-24 20:16:40</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>a243f4c3dbea4300dfa77fcfbf96197c</sys_id>
        <sys_mod_count>504</sys_mod_count>
        <sys_name>SnippetNow Editor</sys_name>
        <sys_package display_value="Snippet Repo" source="x_92893_snippetnow">86490346db010300dfa77fcfbf9619c2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Snippet Repo">86490346db010300dfa77fcfbf9619c2</sys_scope>
        <sys_update_name>sp_widget_a243f4c3dbea4300dfa77fcfbf96197c</sys_update_name>
        <sys_updated_by>PD0083</sys_updated_by>
        <sys_updated_on>2020-03-09 13:42:57</sys_updated_on>
        <template><![CDATA[<div ng-show="data.hasRole">

<h3> Snippet
    <div class="attachments pull-right" ng-click="addAttachment(snippet.sys_id)" ng-if="snippet.sys_id && !canYouEdit()"><i class="fa fa-paperclip" aria-hidden="true"></i></div>
</h3>

  <form>

    <div class="form-group">
      <label for="snippetTitle">Title</label>
      <input type="text" ng-model="snippet.title" class="form-control" ng-readonly="!youCanEdit" id="snippetTitle" placeholder="Snippet Title">
      <input type="hidden" ng-model="snippet.sys_id">
    </div><!-- Form Group -->

    <!-- Need some types, and stuff here -->
    <div class="row">
      <div class="col-lg-6">
        <div class="form-group">
          <label for="snippetApp">Application <i class="fa fa-info-circle" aria-hidden="true" ng-click="iNeedHelp('snippet_application')"></i></label>
          <div>
            <sn-record-picker sn-disabled="!youCanEdit" default-query="'active=true'" field="snippetApp" table="'x_92893_snippetnow_snippetnow_applications'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" ></sn-record-picker>
          </div><!-- -->
        </div><!-- Form Group -->
      </div><!-- Column -->
      <div class="col-lg-6">
        <div class="form-group">
          <label for="snippetType">Type <i class="fa fa-info-circle" aria-hidden="true" ng-click="iNeedHelp('snippet_type')"></i></label>
          <div>
            <sn-record-picker sn-disabled="!youCanEdit"  default-query="'active=true'" field="snippetType" table="'x_92893_snippetnow_snippet_type'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" ></sn-record-picker>
          </div><!-- -->
        </div><!-- Form Group -->
      </div><!-- Column -->
    </div><!-- Row -->

    <div class="row">
      <div class="col-lg-6">
        <div class="form-group">
          <label for="snippetEditorMode">Language</label>
          <div ng-show="snippetType.value" class="padding-top-6">[{{snippetEditorMode.value.replace('_', ' ')}}]</div>
          <div ng-show="!snippetType.value"><sn-record-picker sn-disabled="!youCanEdit" default-query="" field="snippetEditorMode" table="'x_92893_snippetnow_snippetnow_editor_mode'" display-field="'mode_name'" value-field="'mode_value'" search-fields="'mode_name'" page-size="100" ></sn-record-picker></div>
        </div><!-- Form Group -->
      </div><!-- Column -->
      <div class="col-lg-6">
        <div class="form-group">
          <div class="checkbox"><input type="checkbox" ng-disabled="canYouEdit()" ng-model="snippet.allow_others_to_edit" ng-change="canEdit(snippet.allow_others_to_edit)" ng-true-value="true" ng-false-value="false"/> Allow others to edit  <i class="fa fa-info-circle" aria-hidden="true" ng-click="iNeedHelp('allow_others_to_edit')"></i></div>
        </div><!-- Column -->
      </div> <!-- Form Group -->
    </div> <!-- Row -->

    <div class="row">
      <div class="col-lg-12">
        <div class="form-group">
          <label for="snippetDescription">Description</label>
          <textarea class="form-control" ng-model="snippet.description" ng-readonly="!youCanEdit"></textarea>
        </div><!-- Form Group -->
      </div><!-- Column -->
    </div><!-- Row -->


    <div class="row">
      <div class="col-lg-6">
        <label for="tagBUttons">Tags</label>
        <div ng-if="youCanEdit">
          <tags-input ng-model="snippet.tags" add-on-paste="true" ng-disable="!youCanEdit" ng-readonly="!youCanEdit">
            <auto-complete source="loadTags($query)"></auto-complete>
          </tags-input>
          <div ng-if="!youCanEdit">
            <button ng-repeat="tag in snippet.tags" class="btn btn-default" ng-disabled="!youCanEdit">
              {{tag.text}}
            </button>
          </div>
        </div>
      </div>

      <div class="col-lg-6">
        <div class="form-group" >
          <label for="snippetRelated">Related Snippets</label>
          <div class="related-snip-list">
            <button ng-repeat="rSnip in snippetSetModel" class="btn btn-default" ng-click="gotoSnippet(rSnip.id)"> {{rSnip.label}} </button>
          </div><!-- Related List -->
          <div ng-dropdown-multiselect="" options="snippetSetOptions" selected-model="snippetSetModel" extra-settings="snippetExtraSettings" disabled="!youCanEdit"></div>
        </div>
      </div>

      <div class="form-group editor-group" ng-class="editorHeight()">
        <label for="snippetHTML">Snippet </label>
        <div class="padding-top-10" id="snippetHTML" id="editor" ng-model="snippet.editor" class="form-control"></div>
        <!--<div class="pull-right"><span class="small muted">[mode: {{snippetEditorMode.value.replace('_', ' ')}}]</span></div>-->
      </div>
      <div class="form-group clearfix" style="margin-bottom: 40px;">
        <div class="pull-right">
          <button ng-if="!snippet.sys_id && !canYouEdit()" class="btn btn-danger" ng-click="cancelAdd()">Cancel</button>
          <button ng-if="!snippet.sys_id && !canYouEdit()" type="submit" class="btn btn-primary" ng-click="submit('insert')">Submit</button>
          <!--<button ng-if="snippet.sys_id && !canYouEdit()" type="delete" class="btn btn-danger" ng-click="delete()">Deactivate</button>-->
          <button ng-if="snippet.sys_id && !canYouEdit() || snippet.add_comments" type="submit" class="btn btn-success" ng-click="submit('update')">Update</button>
        </div>
      </div>

      <div class="form-group">
        <label for="snippetComments">Add Comment</label>
        <textarea ng-model="snippet.add_comments" class="form-control"></textarea>

        <div class="comment-area">
          <h3>Comments</h3>
          <div class="chat clearfix">
            <div ng-repeat="comment in snippet.previous_comments">

              <!--<div ng-class="chatContainer(comment.created_by.sys_id,snippet.created_by.sys_id)">-->
              <div ng-class="chatCSS(comment.created_by.sys_id,snippet.created_by.sys_id,'container')">

                <div ng-if="chatCSS(comment.created_by.sys_id,snippet.created_by.sys_id,'avatar-left')" class="left-avatar chat-avatar pull-left"><span class="avatar-circle" uib-tooltip="{{comment.created_by.name}}"><sn-avatar class="avatar-small-medium" primary="comment.created_by.sys_id" /></span></div>

                <div ng-if="chatCSS(comment.created_by.sys_id,snippet.created_by.sys_id,'avatar-right')" class="right-avatar chat-avatar pull-right"><span class="avatar-circle" uib-tooltip="{{comment.created_by.name}}"><sn-avatar class="avatar-small-medium" primary="comment.created_by.sys_id" /></span></div>


                <div class="" ng-class="whoSaidIt(comment.created_by.sys_id,snippet.created_by.sys_id)">
                  <span class="">{{comment.comment}}</span>
                </div>


              </div>
            </div>
          </div>
        </div>
      </div>


      </form>

    <!--</div>-->
    <!--</div>-->
    </div>
  <script type="text/ng-template" id="showHelp">
	<div class="panel panel-info">
  	<div class="panel panel-heading">
    	SnippetNOW Help - {{modalData.title}}
      <i class="fa fa-times fa-2x pull-right" aria-hidden="true" ng-click="closeModal()"></i>
    </div>
   <div class="panel panel-body">
   	<div ng-bind-html="modalData.body"></div>
    </div>
    </div>

  </script>
  <script type="text/ng-template" id="updatedSnippet">
	<div ng-show="c.data.recordAction" class="alert alert-success" style="margin-bottom:0px">
    <strong>Success!</strong> Snippet has been updated!.
    </div>
  <div ng-show="c.data.recordAction == false" class="alert alert-danger" style="margin-bottom:0px">
    <strong>Error!</strong> Snippet did not save, please try again.
    </div>
  </script>
  <script type="text/ng-template" id="loadNewSnippetConfirm">
	<div class="panel panel-info">
  	<div class="panel panel-heading">
    	Confirm
    </div>
    <div class="panel panel-body">
    	<p>This will load a new Snippet, if you have unsaved work on the current Snippet, please click "Cancel" and save your work, then try this action again. Otherwise click "Ok" and the new Snippet will be loaded.</p>
      <div class="pull-right">
      	<button class="btn btn-success" ng-click="loadNewSnippet(modalData)">OK - Load Snippet</button> <button class="btn btn-danger" ng-click="closeModal()">Cancel</button>
    </div>
    </div>
    </div>
  </script>
  <script type="text/ng-template" id="addAttachment">
	<div class="panel panel-default">
  	<div class="panel-heading">
    	<h4>Add Attachments <span class="pull-right"><i class="fa fa-times" aria-hidden="true" ng-click="closeModal()"></i></span></h4>
    </div>
    <div class="panel-body">
    	<sp-widget widget="c.attachmentItemWidget"></sp-widget>
    </div>
    </div>

  </script>]]></template>
    </sp_widget>
</record_update>
